const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

class FileManager {
    constructor() {
        this.uploadDir = path.join(__dirname, '../uploads');
        this.downloadDir = path.join(__dirname, '../downloads');
        this.maxFileSize = 50 * 1024 * 1024; // 50MB
        this.allowedExtensions = [
            '.txt', '.log', '.json', '.xml', '.csv',
            '.jpg', '.jpeg', '.png', '.gif', '.bmp',
            '.mp3', '.mp4', '.avi', '.mov', '.wav',
            '.pdf', '.doc', '.docx', '.xls', '.xlsx',
            '.zip', '.rar', '.7z', '.tar', '.gz'
        ];
        this.initDirectories();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    initDirectories() {
        [this.uploadDir, this.downloadDir].forEach(dir => {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    isAllowedExtension(filename) {
        const ext = path.extname(filename).toLowerCase();
        return this.allowedExtensions.includes(ext);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    generateSafeFilename(originalName) {
        const ext = path.extname(originalName);
        const name = path.basename(originalName, ext);
        const timestamp = Date.now();
        const random = crypto.randomBytes(4).toString('hex');
        return `${name}_${timestamp}_${random}${ext}`;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    getFileInfo(filePath) {
        try {
            const stats = fs.statSync(filePath);
            return {
                name: path.basename(filePath),
                size: stats.size,
                isDirectory: stats.isDirectory(),
                isFile: stats.isFile(),
                modified: stats.mtime,
                created: stats.birthtime,
                permissions: stats.mode,
                extension: path.extname(filePath)
            };
        } catch (error) {
            return null;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    listFiles(directoryPath, showHidden = false) {
        try {
            const files = fs.readdirSync(directoryPath);
            const fileList = [];

            files.forEach(file => {
                if (!showHidden && file.startsWith('.')) return;

                const filePath = path.join(directoryPath, file);
                const fileInfo = this.getFileInfo(filePath);
                
                if (fileInfo) {
                    fileList.push({
                        ...fileInfo,
                        path: filePath,
                        relativePath: file
                    });
                }
            });

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
            return fileList.sort((a, b) => {
                if (a.isDirectory && !b.isDirectory) return -1;
                if (!a.isDirectory && b.isDirectory) return 1;
                return a.name.localeCompare(b.name);
            });
        } catch (error) {
            console.error('Error listing files:', error);
            return [];
        }
    }

    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    searchFiles(searchPath, query, recursive = true) {
        const results = [];
        
        try {
            const search = (dir) => {
                const files = fs.readdirSync(dir);
                
                files.forEach(file => {
                    const filePath = path.join(dir, file);
                    const stats = fs.statSync(filePath);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å—É
                    const matchesName = file.toLowerCase().includes(query.toLowerCase());
                    const matchesExtension = query.startsWith('.') && 
                        path.extname(file).toLowerCase() === query.toLowerCase();
                    
                    if (matchesName || matchesExtension) {
                        results.push({
                            name: file,
                            path: filePath,
                            size: stats.size,
                            isDirectory: stats.isDirectory(),
                            modified: stats.mtime
                        });
                    }
                    
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                    if (recursive && stats.isDirectory()) {
                        search(filePath);
                    }
                });
            };
            
            search(searchPath);
        } catch (error) {
            console.error('Error searching files:', error);
        }
        
        return results;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    createDirectory(dirPath) {
        try {
            fs.mkdirSync(dirPath, { recursive: true });
            return { success: true, message: 'Directory created successfully' };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    deleteItem(itemPath) {
        try {
            const stats = fs.statSync(itemPath);
            
            if (stats.isDirectory()) {
                fs.rmSync(itemPath, { recursive: true, force: true });
            } else {
                fs.unlinkSync(itemPath);
            }
            
            return { success: true, message: 'Item deleted successfully' };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    copyFile(sourcePath, destPath) {
        try {
            fs.copyFileSync(sourcePath, destPath);
            return { success: true, message: 'File copied successfully' };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    moveFile(sourcePath, destPath) {
        try {
            fs.renameSync(sourcePath, destPath);
            return { success: true, message: 'File moved successfully' };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    readTextFile(filePath, maxSize = 1024 * 1024) { // 1MB max
        try {
            const stats = fs.statSync(filePath);
            
            if (stats.size > maxSize) {
                return { 
                    success: false, 
                    message: `File too large (${this.formatFileSize(stats.size)}). Max size: ${this.formatFileSize(maxSize)}` 
                };
            }
            
            const content = fs.readFileSync(filePath, 'utf8');
            return { success: true, content };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –ó–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    writeTextFile(filePath, content) {
        try {
            fs.writeFileSync(filePath, content, 'utf8');
            return { success: true, message: 'File written successfully' };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ
    getDiskUsage(dirPath) {
        try {
            const stats = fs.statSync(dirPath);
            // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
            return {
                total: 'N/A',
                used: 'N/A',
                free: 'N/A',
                path: dirPath
            };
        } catch (error) {
            return null;
        }
    }

    // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
    createArchive(files, archivePath) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return { 
            success: false, 
            message: 'Archive creation not implemented yet' 
        };
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    extractArchive(archivePath, extractPath) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
        return { 
            success: false, 
            message: 'Archive extraction not implemented yet' 
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
    getFileHash(filePath, algorithm = 'md5') {
        try {
            const data = fs.readFileSync(filePath);
            const hash = crypto.createHash(algorithm).update(data).digest('hex');
            return { success: true, hash };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Telegram
    formatFileListForTelegram(files, currentPath = '') {
        if (files.length === 0) {
            return 'üìÅ <b>Empty Directory</b>\n\nNo files found.';
        }

        let message = `üìÅ <b>Files in: ${currentPath || 'Root'}</b>\n\n`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15 —Ñ–∞–π–ª–æ–≤
        const displayFiles = files.slice(0, 15);
        
        displayFiles.forEach((file, index) => {
            const icon = file.isDirectory ? 'üìÅ' : this.getFileIcon(file.extension);
            const size = file.isDirectory ? '' : ` (${this.formatFileSize(file.size)})`;
            const modified = file.modified.toLocaleDateString();
            
            message += `${index + 1}. ${icon} <b>${file.name}</b>${size}\n`;
            message += `   üìÖ ${modified}\n\n`;
        });

        if (files.length > 15) {
            message += `... and ${files.length - 15} more items\n\n`;
        }

        message += `üìä Total: ${files.length} items`;
        
        return message;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    getFileIcon(extension) {
        const iconMap = {
            '.txt': 'üìÑ',
            '.log': 'üìã',
            '.json': 'üìã',
            '.xml': 'üìã',
            '.csv': 'üìä',
            '.jpg': 'üñºÔ∏è',
            '.jpeg': 'üñºÔ∏è',
            '.png': 'üñºÔ∏è',
            '.gif': 'üñºÔ∏è',
            '.bmp': 'üñºÔ∏è',
            '.mp3': 'üéµ',
            '.wav': 'üéµ',
            '.mp4': 'üé¨',
            '.avi': 'üé¨',
            '.mov': 'üé¨',
            '.pdf': 'üìï',
            '.doc': 'üìò',
            '.docx': 'üìò',
            '.xls': 'üìó',
            '.xlsx': 'üìó',
            '.zip': 'üì¶',
            '.rar': 'üì¶',
            '.7z': 'üì¶',
            '.tar': 'üì¶',
            '.gz': 'üì¶'
        };

        return iconMap[extension?.toLowerCase()] || 'üìÑ';
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è Telegram
    formatSearchResultsForTelegram(results, query) {
        if (results.length === 0) {
            return `üîç <b>Search Results</b>\n\nNo files found for query: "${query}"`;
        }

        let message = `üîç <b>Search Results for: "${query}"</b>\n\n`;
        
        const displayResults = results.slice(0, 10);
        
        displayResults.forEach((file, index) => {
            const icon = file.isDirectory ? 'üìÅ' : this.getFileIcon(path.extname(file.name));
            const size = file.isDirectory ? '' : ` (${this.formatFileSize(file.size)})`;
            
            message += `${index + 1}. ${icon} <b>${file.name}</b>${size}\n`;
            message += `   üìÇ ${path.dirname(file.path)}\n`;
            message += `   üìÖ ${file.modified.toLocaleDateString()}\n\n`;
        });

        if (results.length > 10) {
            message += `... and ${results.length - 10} more results\n\n`;
        }

        message += `üìä Total found: ${results.length} items`;
        
        return message;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    cleanupOldFiles(directory, maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 –¥–Ω–µ–π
        try {
            const files = fs.readdirSync(directory);
            let deletedCount = 0;
            
            files.forEach(file => {
                const filePath = path.join(directory, file);
                const stats = fs.statSync(filePath);
                
                if (Date.now() - stats.mtime.getTime() > maxAge) {
                    fs.unlinkSync(filePath);
                    deletedCount++;
                }
            });
            
            return { success: true, deletedCount };
        } catch (error) {
            return { success: false, message: error.message };
        }
    }
}

module.exports = FileManager;